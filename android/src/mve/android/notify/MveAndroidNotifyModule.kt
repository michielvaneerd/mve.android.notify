/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package mve.android.notify

import android.app.AlarmManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import java.util.Calendar
import android.os.Build
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.TiConfig
import org.appcelerator.titanium.TiApplication
import java.text.SimpleDateFormat

const val channelId = "channel";
val DBG = TiConfig.LOGD
const val LCAT = "MveAndroidNotifyModule"

@Kroll.module(name = "MveAndroidNotify", id = "mve.android.notify")
class MveAndroidNotifyModule: KrollModule() {

	// NOTE: You can develop Titanium Android modules in Android Studio. Follow these three steps:
	//   1. Build the empty module
	//   2. Drag the "build" folder into Android Studio
	//   3. Start developing! All dependencies and code completions are supported!

	companion object {

		@Kroll.constant
		const val REQUEST_CODE = "requestCode"

		@Kroll.constant
		const val CONTENT = "content"

		@Kroll.constant
		const val TITLE = "title"

		@Kroll.constant
		const val ICON = "icon"

		@Kroll.constant
		const val HOUR = "hour"

		@Kroll.constant
		const val MINUTE = "minute"

		@Kroll.constant
		const val INTERVAL = "interval"

		@Kroll.constant
		const val INTERVAL_ONCE = "once"

		@Kroll.constant
		const val INTERVAL_HOUR = "hour"

		@Kroll.constant
		const val INTERVAL_DAY = "day"

		@Kroll.constant
		const val INTERVAL_WEEK = "week"

		@Kroll.constant
		const val INTERVAL_4_WEEK = "4_week"

		@Kroll.constant
		const val EXACT = "exact"

		@Kroll.onAppCreate
		fun onAppCreate(app: TiApplication?) {

		}

		// Static functions that we may also need in the AlarmReceiver if we have exact repeating alarms.
		fun getReceiverIntent(): Intent {
			return Intent(TiApplication.getInstance().applicationContext, MveAlarmReceiver::class.java)
		}

		fun getPendingIntent(requestCode: Int, intent: Intent): PendingIntent {
			return PendingIntent.getBroadcast(TiApplication.getInstance().applicationContext, requestCode, intent,
				PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)
		}

		private fun getContext(): Context {
			return TiApplication.getInstance().applicationContext;
		}

		private fun intervalToMs(interval: String): Long {
			return when (interval) {
				INTERVAL_HOUR -> AlarmManager.INTERVAL_HOUR
				INTERVAL_DAY -> AlarmManager.INTERVAL_DAY
				INTERVAL_WEEK -> AlarmManager.INTERVAL_DAY * 7
				INTERVAL_4_WEEK -> AlarmManager.INTERVAL_DAY * 28
				else -> 0L
			}
		}

		fun scheduleNotification(requestCode: Int, content: String, title: String, icon: String, interval: String, isExact: Boolean, hour: Int, minute: Int, fromReceiver: Boolean) {

			val context = getContext()

			var infoIntent = getReceiverIntent();
			infoIntent.putExtra(REQUEST_CODE, requestCode)
			infoIntent.putExtra(CONTENT, content)
			infoIntent.putExtra(TITLE, title)
			infoIntent.putExtra(ICON, icon)
			infoIntent.putExtra(INTERVAL, interval)
			infoIntent.putExtra(EXACT, isExact)
			infoIntent.putExtra(HOUR, hour)
			infoIntent.putExtra(MINUTE, minute)

			var calendar = Calendar.getInstance().apply {
				timeInMillis = System.currentTimeMillis()
				set(Calendar.HOUR_OF_DAY, hour)
				set(Calendar.MINUTE, minute)
				set(Calendar.SECOND, 0)
			};

			val intervalInMs = intervalToMs(interval)

			if (fromReceiver) {
				// We are rescheduling an exact repeating notification
				when (interval) {
					INTERVAL_HOUR -> calendar.set(Calendar.HOUR_OF_DAY, calendar.get(Calendar.HOUR_OF_DAY) + 1)
					INTERVAL_DAY -> calendar.add(Calendar.DAY_OF_MONTH, 1)
					INTERVAL_WEEK -> calendar.add(Calendar.DAY_OF_MONTH, 7)
					INTERVAL_4_WEEK -> calendar.add(Calendar.DAY_OF_MONTH, 28)
				}
			}

			val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager;
			var pendingIntent = getPendingIntent(requestCode, infoIntent)

			if (isExact) {
				// setRepeating doesn't work exact, you have to schedule one exact with setExact() and then reschedule the next one in the alarm receiver.
				// https://stackoverflow.com/a/59473739/1294832
				alarmManager.setExact(AlarmManager.RTC_WAKEUP, calendar.timeInMillis, pendingIntent)
			} else {
				if (interval == INTERVAL_ONCE) {
					alarmManager.set(AlarmManager.RTC_WAKEUP, calendar.timeInMillis, pendingIntent)
				} else {
					alarmManager.setInexactRepeating(
						AlarmManager.RTC_WAKEUP,
						calendar.timeInMillis,
						intervalInMs,
						pendingIntent
					)
				}
			}

			Utils.log("Scheduled $interval " + (if(isExact) "exact" else "inexact") + " notification #$requestCode starting on ${SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(calendar.time)}")
		}
	}

	// Public instance functions that can be called from the Titanium app
	@Kroll.method
	fun createChannel() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
			Utils.log("Create notification channel")
			val name: CharSequence = "default";
			val notificationManager = TiApplication.getInstance().applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
			notificationManager.createNotificationChannel(NotificationChannel(channelId, name, NotificationManager.IMPORTANCE_DEFAULT))
		}
	}

	@Kroll.method
	fun cancel(requestCode: Int) {
		Utils.log("Cancelling notification $requestCode")
		val alarmManager = TiApplication.getInstance().applicationContext.getSystemService(Context.ALARM_SERVICE) as AlarmManager;
		alarmManager.cancel(getPendingIntent(requestCode, getReceiverIntent()));
	}

	@Kroll.method
	fun schedule(arg: KrollDict) {

		// From KrollDict to properties
		val requestCode = arg.getInt(REQUEST_CODE)
		val title = arg.getString(TITLE)
		val content = arg.getString(CONTENT)
		val icon = arg.getString(ICON)
		val hour = arg.getInt(HOUR)
		val minute = arg.getInt(MINUTE)
		val interval = if (arg.containsKeyAndNotNull(INTERVAL)) arg.getString(INTERVAL) else INTERVAL_ONCE
		val isExact = arg.getBoolean(EXACT)

		scheduleNotification(requestCode, content, title, icon, interval, isExact, hour, minute, false)

	}

	@Kroll.method
	fun canScheduleExactAlarms(): Boolean {
		val alarmManager = TiApplication.getInstance().applicationContext.getSystemService(Context.ALARM_SERVICE) as AlarmManager;
		return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) alarmManager.canScheduleExactAlarms() else true;
	}




}
